<?php

// max number of entries on a search page
define('WISSKI_GETTY_AP_ENTRIES_PER_PAGE', 25);


/* implementation of hook_wisski_accesspoint
*
* This module provides its own ap type 'store'. The store type creates a local
* triple store using ARC2 for each ap object. The user may then import RDF data
* and query it via the endpoint member.
*
* @author Martin Scholz
* 
*/
function wisski_getty_ap_wisski_accesspoint($op, $ap = NULL) {

  switch ($op) {
    case 'types':
      // provide type store
      return array(
        'getty_wrapper' => array(
          'name' => t('Getty Wrapper'),
          'description' => t('Access the Getty vocabularies'),
        )
      );
    
    case 'operations':
      // Provide the standard edit form plus
      // a form for import of rdf files and
      // a command to drop the store contents
      // see also the wisski_ap_store_menu hook
      return array(
        t('Edit') => 'admin/settings/wisski/accesspoint/' . $ap->aid . '/edit',
      );

    case 'url':
      
      // each store has a sparql endpoint
      global $base_root, $base_path;
      return $base_root . $base_path . 'wisski/ap_store/' . $ap->aid . '/endpoint';

    case 'endpoint':
      
      return new WissKIGettyWrapper();

    case 'delete':
      
      return NULL;

    case 'edit':
      
      // present a list of imported files with import dates
      
      $fieldset['index_info'] = array(
        '#value' => t('This accesspoint comes with its own caching and indexing mechanism. Do not activate normal indexing.'),
      );
      $fieldset['search_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Search URL'),
        '#description' => t('The URL to be accessed for searching entries. Use %{searchenc} for the url encoded search string and %{page} for the page number.'),
        '#default_value' => isset($ap->settings['search_url']) ? $ap->settings['search_url'] : '',
      ); 
      $fieldset['about_url'] = array(
        '#type' => 'textfield',
        '#title' => t('About URL'),
        '#description' => t('The URL to be accessed for information about an entry. Use %{gettyid} for the Getty ID of the entry.'),
        '#default_value' => isset($ap->settings['about_url']) ? $ap->settings['about_url'] : '',
      );
      $fieldset['entry_uri'] = array(
        '#type' => 'textfield',
        '#title' => t('Entry URI'),
        '#description' => t('The URI scheme for an entry. Use %{gettyid} for the Getty ID of the entry. The Getty ID must occur exactly once.'),
        '#default_value' => isset($ap->settings['entry_uri']) ? $ap->settings['entry_uri'] : 'http://vocab.getty.edu/tgn/%{gettyid}',
      );
      $fieldset['empty_cache'] = array(
        '#type' => 'checkbox',
        '#title' => t('Empty cache'),
        '#description' => t('Empty the cache of entries.'),
        '#default_value' => 0,
      );

      return $fieldset;

    case 'validate':
      
      return;

    case 'submit':

      if ($ap->empty_cache) {
        db_query('TRUNCATE TABLE {wisski_getty_ap}');
      }
      
      return array(
        array(
          'search_url' => $ap->search_url,
          'about_url' => $ap->about_url,
          'entry_uri' => $ap->entry_uri,
        ),
        NULL,
      );
      
  }

}



/** Dummy wrapper for the endpoint. There is no endpoint here...
*
* @author Martin Scholz
*/
class WissKIGettyWrapper {

  public function query() {
    return array();
  }

  public function getErrors() {
    return array();
  }

}


/** Handles all queries on all fields
*
* @author Martin Scholz
*/
function wisski_getty_ap_getty_wrapper_fields_cb($fid, $ap, $source, $target, $limit, $offset, $match_mode, $no_order = FALSE) {

  // these are all supported fields
  if (!in_array($fid, array('label', 'alt_label', 'description', 'latitude', 'longitude', 'broader'))) return array();

  if (!$source) {
    // perform a search
    
    if ($fid != 'label' && $fid != 'alt_label') return array();

    //TODO
    return array();

  } else {
    // gather information about $source
    
    $uri_scheme = $ap->settings['entry_uri'];
    list($prefix, $suffix) = explode('%{gettyid}', $uri_scheme, 2);
    
    $lp = strlen($prefix);
    $ls = strlen($suffix);
    if (substr($source, 0, $lp) == $prefix && (!$suffix || substr($source, -$ls) == $suffix)) {
      
      $gettyid = !$ls ? substr($source, $lp) : substr($source, $lp, -$ls);
      
      // check if 
      $tmp = db_query("SELECT parsed, fields FROM {wisski_getty_ap_cache} WHERE gettyid = %d", $gettyid, $fid);
      $record = db_fetch_array($tmp);
      if (!$record || (!$record['parsed'] && !isset($record['fields'][$fid]))) {
        
        $url = str_replace('%{gettyid}', $gettyid, $ap->settings['about_url']);
        if (!($page = file_get_contents($url))) {
          return array();
        }
        $values = _wisski_getty_ap_parse_about($page, $gettyid, $uri_scheme);

      } else {
        $values = unserialize($record['fields']);
      }

/*      $values = _wisski_getty_ap_filter_values($target, $match_mode, $values);

      if (!$no_order) {
        usort($values, function($a, $b) {return strnatcasecmp($a['value'], $b['value']); });
      }

      if ($limit > 0) {
        $values = array_slice($values, $offset, $limit);
      }*/

      return array($source => array($fid => $values[$fid]));

    } else {
      // this is not a valid getty uri
      return array();
    }
  
  }

}


/** Extract all information from a web page for an entry
*
* @author Martin Scholz
*/
function _wisski_getty_ap_parse_about($page, $gettyid, $uri_scheme) {
  
  $page_txt = preg_replace('/(&nbsp;|\s|\r|\n)+/us', ' ', $page);
  $page_txt = preg_replace('/<!--([^-]|-[^-])+-->/ius', '', $page_txt);
  $page_txt = preg_replace('/<script[^>]*>[^<]*<\/[^>]+>/ius', '', $page_txt);
  $page_txt = preg_replace('/<br>|<tr( [^>]*)*>/ius', "\n", $page_txt);
  $page_txt = preg_replace('/<[^a][^>]*>/ui', '', $page_txt);
  $page_txt = preg_replace('/  +/us', ' ', $page_txt);
  $page_txt = preg_replace('/ $/um', '', $page_txt);
  
  db_query('DELETE FROM {wisski_getty_ap_cache} WHERE gettyid = %d', $gettyid);
  
  $values = array();
file_put_contents('/tmp/tgn.txt', $page_txt);  

  if (preg_match('/Lat: ([-0-9.]+) decimal.* Long: ([-0-9.]+) decimal/us', $page_txt, $m)) {
    $values['latitude'] = array(
      array(
        'value' => $m[1],
        'type' => 'literal',
        'lang' => '',
      ),
    );
    $values['longitude'] = array(
      array(
        'value' => $m[2],
        'type' => 'literal',
        'lang' => '',
      ),
    );
  }

  if (preg_match('/^Note: ?(.*?) ?\n\n/usm', $page_txt, $m)) {
    $values['description'] = array(
      array(
        'value' => $m[1],
        'type' => 'literal',
        'lang' => '',
      ),
    );
  }

  if (preg_match('/Names:\n\n(.*?)\n\n/us', $page_txt, $m)) {
    $m = explode("\n", $m[1]);
    foreach ($m as $k => $n) {
      $a = mb_strpos($n, '(');
      if ($a === FALSE) {
        $m[$k] = trim($n);
      } elseif ($a == 0) {
        unset($m[$k]);
      } else {
        $m[$k] = trim(mb_substr($n, 0, $a));
      }
    }
    $label = array_shift($m);
    $values['label'] = array(
      array(
        'value' => $label,
        'type' => 'literal',
        'lang' => '',
      )
    );
    foreach ($m as $alt_label) {
      $values['alt_label'][] = array(
        'value' => $alt_label,
        'type' => 'literal',
        'lang' => '',
      );
    }
  }

//  if (preg_match('/Hierarchical Position:\n\n(?:<A HREF="([^"]+).*">([^>\n]+)\([^\n]*\n)*/us', $page_txt, $m) && count($m) > 2) {
  if (preg_match('/Hierarchical Position:\n\n(.*?)\n\n/usm', $page_txt, $m)) {
    $l = explode("\n", $m[1]);
    if (count($l) > 1) {
      $m = array();
      foreach ($l as $k => $n) {
        if (preg_match('/^ ?<A HREF="([^"]+).*">([^>\(]+) ?\(/us', $n, $m1)) {
          $m[] = $m1[1];
          $m[] = $m1[2];
        }
      }
      $broader = NULL;
      for ($i = 0; $i < count($m); $i += 2) {
        $url = $m[$i];
        $label = trim($m[$i + 1]);

        if (preg_match('/subjectid=(\d+)/', $url, $m2)) {
          $id = $m2[1];
          $uri = str_replace('%{gettyid}', $id, $uri_scheme);

          if ($id != $gettyid) {

            $tmp = db_query("SELECT parsed FROM {wisski_getty_ap_cache} WHERE gettyid = %d", $id);
            if (db_result($tmp) === FALSE) {
              $record = array(
                'gettyid' => $id,
                'parsed' => 0,
                'fields' => array('label' => array(
                  array(
                    'value' => $label,
                    'type' => 'literal',
                    'lang' => '',
                    ),
                  )
                )
              );
              if ($broader) {
                $record['fields']['broader'] = array(
                  array(
                    'value' => $broader,
                    'type' => 'uri',
                  ),
                );
              }

              drupal_write_record('wisski_getty_ap_cache', $record);
            }

          } elseif ($broader) {

            $values['broader'] = array(
              array(
                'value' => $broader,
                'type' => 'uri',
              ),
            );

          }
          
          $broader = $uri;

        }
      }
    }
  }
  
  $record = array(
    'gettyid' => $gettyid,
    'parsed' => 1,
    'fields' => $values,
  );

  drupal_write_record('wisski_getty_ap_cache', $record);

  return $values;

}


/** Extract all information from a search result web page 
*
* @author Martin Scholz
*/
function _wisski_getty_ap_parse_search($page) {

}


/** Filter an array according to a filtering mode 
*
* @author Martin Scholz
*/
function _wisski_getty_ap_filter_values($pattern, $mode, $values) {
  
  if ($mode == 'exact') {
      
    foreach ($values as $k => $v) {
      if ($pattern != $v['value']) unset($values[$k]);
    }

  } else {  // all other modes are currently implemented as "contains"
    
    foreach ($values as $k => $v) {
      if (strpos($v['value'], $pattern) === FALSE) unset($values[$k]);
    }

  }

  return $values;

}
